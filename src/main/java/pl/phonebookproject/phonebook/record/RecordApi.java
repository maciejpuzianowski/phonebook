/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pl.phonebookproject.phonebook.record;

import pl.phonebookproject.phonebook.models.Record;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-08-03T16:02:09.857300600+02:00[Europe/Warsaw]")
@Validated
public interface RecordApi {

    @Operation(summary = "Adds record to phonebook.", description = "", tags={ "record" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully added.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/record/add",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> recordAddPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Record body);


    @Operation(summary = "Removes record to phonebook.", description = "", tags={ "record" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Response of successfully added or no such phone number.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/record/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> recordDeleteDelete(@Parameter(in = ParameterIn.QUERY, description = "Phone number to remove from phonebook." ,schema=@Schema()) @Valid @RequestParam(value = "phoneNumber", required = false) String phoneNumber);


    @Operation(summary = "Returns a list of records.", description = "", tags={ "record" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A JSON array of phonebook records.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))) })
    @RequestMapping(value = "/record",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Record>> recordGet(@Parameter(in = ParameterIn.QUERY, description = "Field to sort by." ,schema=@Schema()) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @Parameter(in = ParameterIn.QUERY, description = "Direction to order by." ,schema=@Schema()) @Valid @RequestParam(value = "orderBy", required = false) String orderBy);

}

